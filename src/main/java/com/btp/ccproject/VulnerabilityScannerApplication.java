package com.btp.ccproject;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

@SpringBootApplication
public class VulnerabilityScannerApplication implements CommandLineRunner {

    private static final Map<String, Integer> severityWeights = new HashMap<>();
    static {
        severityWeights.put("CRITICAL", 7);
        severityWeights.put("HIGH", 5);
        severityWeights.put("MEDIUM", 3);
        severityWeights.put("LOW", 1);
    }

    private static final int VULNERABILITY_THRESHOLD = 200;

    public static void main(String[] args) {
        SpringApplication.run(VulnerabilityScannerApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        String imageName;
        if (args.length > 0) {
            imageName = args[0];
        } else {
            System.out.println("Usage: java -jar <jar-file> <docker-image-name>");
            System.exit(1);
            return;
        }
        String[] command = {
                "docker", "run", "--rm",
                "-v", "/var/run/docker.sock:/var/run/docker.sock",
                "aquasec/trivy", "--quiet", "-f", "json", "image", imageName
        };


        ProcessBuilder processBuilder = new ProcessBuilder(command);
        processBuilder.redirectErrorStream(true);
        Process process = processBuilder.start();

        StringBuilder outputBuilder = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            String line;
            System.out.println("Scanning Docker image for vulnerabilities...");
            while ((line = reader.readLine()) != null) {
                outputBuilder.append(line);
            }
        }
        int exitCode = process.waitFor();
        System.out.println("Scan completed with exit code: " + exitCode);

        String jsonOutput = outputBuilder.toString();
        int vulnerabilityScore = calculateVulnerabilityScore(jsonOutput);

        System.out.println("Calculated Vulnerability Score: " + vulnerabilityScore);
        if (vulnerabilityScore > VULNERABILITY_THRESHOLD) {
            System.out.println("Image is vulnerable. (Score exceeds threshold of " + VULNERABILITY_THRESHOLD + ")");
            // Optionally, invoke Docker command to delete the image here.
        } else {
            System.out.println("Image is safe to use. (Score is below threshold of " + VULNERABILITY_THRESHOLD + ")");
            // Optionally, save the image locally.
        }
    }
    private int calculateVulnerabilityScore(String jsonOutput) {
        int totalScore = 0;
        try {
            // Find the first '{' which should indicate the start of valid JSON.
            int jsonStart = jsonOutput.indexOf("{");
            if(jsonStart != -1) {
                String validJson = jsonOutput.substring(jsonStart);
                ObjectMapper mapper = new ObjectMapper();
                JsonNode root = mapper.readTree(validJson);

                // The top-level "Results" array
                JsonNode results = root.get("Results");
                if (results != null && results.isArray()) {
                    for (JsonNode result : results) {
                        // Each result may contain a "Vulnerabilities" array
                        JsonNode vulnerabilities = result.get("Vulnerabilities");
                        if (vulnerabilities != null && vulnerabilities.isArray()) {
                            for (JsonNode vulnerability : vulnerabilities) {
                                // Read the "Severity" field and convert it to uppercase
                                String severity = vulnerability.has("Severity") ?
                                        vulnerability.get("Severity").asText().toUpperCase() : "";

                                // Lookup the corresponding weight for the severity
                                Integer weight = severityWeights.getOrDefault(severity, 0);

                                // Add the weight to the total score
                                totalScore += weight;
                            }
                        }
                    }
                } else {
                    System.err.println("No 'Results' array found in JSON output.");
                }
            } else {
                System.err.println("Valid JSON not found in the output.");
            }
        } catch (JsonMappingException e) {
            System.err.println("JsonMappingException: " + e.getMessage());
        } catch (JsonProcessingException e) {
            System.err.println("JsonProcessingException: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("General Exception: " + e.getMessage());
        }
        return totalScore;
    }

}
