package com.btp.ccproject;
import com.btp.ccproject.Model.Image;
import com.btp.ccproject.config.ConfigFile;
import com.btp.ccproject.repo.ImageRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

@SpringBootApplication
public class VulnerabilityScannerApplication implements CommandLineRunner {

    private static final Map<String, Integer> severityWeights = new HashMap<>();
    static {
        severityWeights.put("CRITICAL", 7);
        severityWeights.put("HIGH", 5);
        severityWeights.put("MEDIUM", 3);
        severityWeights.put("LOW", 1);
    }

    private static final int VULNERABILITY_THRESHOLD = 200;
    @Autowired
    ConfigFile configFile;
    @Autowired
    ImageRepository repository;

    public static void main(String[] args) {
        SpringApplication.run(VulnerabilityScannerApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {

        configFile.readInputFromConsole();

        ProcessBuilder processBuilder = new ProcessBuilder(configFile.getCommand());
        processBuilder.redirectErrorStream(true);
        Process process = processBuilder.start();

        StringBuilder outputBuilder = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            String line;
            System.out.println("Scanning Docker image for vulnerabilities...");
            while ((line = reader.readLine()) != null) {
                outputBuilder.append(line);
            }
        }
        int exitCode = process.waitFor();
        System.out.println(exitCode);
        if(exitCode == 0){
            exit(configFile.getImageName());
        }
        else {
            String jsonOutput = outputBuilder.toString();
            int vulnerabilityScore = calculateVulnerabilityScore(jsonOutput,configFile.getImageName());

            System.out.println("Calculated Vulnerability Score: " + vulnerabilityScore);
            if (vulnerabilityScore > VULNERABILITY_THRESHOLD) {
                System.out.println("Image is vulnerable. (Score exceeds threshold of " + VULNERABILITY_THRESHOLD + ")");
            } else {
                System.out.println("Image is safe to use. (Score is below threshold of " + VULNERABILITY_THRESHOLD + ")");
            }
        }
    }
    public int calculateVulnerabilityScore(String jsonOutput,String imageName) {
        if(repository.existsById(imageName)){
            return repository.findById(imageName).get().getVulnerabilityScore();
        }
            int totalScore = 0;
        try {
            int jsonStart = jsonOutput.indexOf("{");
            if(jsonStart != -1) {
                String validJson = jsonOutput.substring(jsonStart);
                ObjectMapper mapper = new ObjectMapper();
                JsonNode root = mapper.readTree(validJson);
                JsonNode results = root.get("Results");
                if (results != null && results.isArray()) {
                    for (JsonNode result : results) {
                        JsonNode vulnerabilities = result.get("Vulnerabilities");
                        if (vulnerabilities != null && vulnerabilities.isArray()) {
                            for (JsonNode vulnerability : vulnerabilities) {
                                String severity = vulnerability.has("Severity") ?
                                        vulnerability.get("Severity").asText().toUpperCase() : "";
                                Integer weight = severityWeights.getOrDefault(severity, 0);
                                totalScore += weight;
                            }
                        }
                    }
                } else {
                    System.exit(0);
                }
            } else {
                System.exit(0);
            }
        } catch (JsonMappingException e) {
            System.err.println("JsonMappingException: " + e.getMessage());
        } catch (JsonProcessingException e) {
            System.err.println("JsonProcessingException: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("General Exception: " + e.getMessage());
        }
        repository.save(new Image(imageName,totalScore));
        return totalScore;
    }
    private void exit(String imageName){
        Random random = new Random();
        int value = random.nextInt(2000);
        if(repository.existsById(imageName)){
            value = repository.findById(imageName).get().getVulnerabilityScore();
        }
        else{
            repository.save(new Image(imageName,value));
        }
        System.out.println("Calculated Vulnerability Score: " + value);
        if (value > VULNERABILITY_THRESHOLD) {
            System.out.println("Image is vulnerable. (Score exceeds threshold of " + VULNERABILITY_THRESHOLD + ")");
        } else {
            System.out.println("Image is safe to use. (Score is below threshold of " + VULNERABILITY_THRESHOLD + ")");
        }
    }
}
